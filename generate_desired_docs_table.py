import pandas as pd
import re

desired_articles = [ # This list generated by looking through full philoso_df for relevant things by article title.
    'ODT_18760318_ARTICLE12',
    'TC_18711017_ARTICLE10',
    'CHP_18920917_ARTICLE10',
    'GLOBE_18820401_ARTICLE21',
    'CHP_18940313_ARTICLE9',
    'ESD_18820918_ARTICLE1',
    'AS_18791120_ARTICLE29',
    'ODT_18960611_ARTICLE12',
    'DSC_18710826_ARTICLE19',
    'CHP_18961008_ARTICLE7',
    'OW_18931102_ARTICLE33',
    'OW_18650708_ARTICLE11',
    'CHP_18920330_ARTICLE46',
    'DSC_18580416_ARTICLE20',
    'CHP_18920919_ARTICLE48',
    'CROMARG_18980628_ARTICLE51',
    'LT_18831025_ARTICLE34',
    'TC_18910713_ARTICLE36',
    'MIC_18820928_ARTICLE10',
    'OW_18890815_ARTICLE107',
    'GLOBE_18780408_ARTICLE8',
    'CROMARG_18920329_ARTICLE12',
    'DSC_18741104_ARTICLE19',
    'AS_18991106_ARTICLE6',
    'OAM_18840416_ARTICLE16',
    'ODT_18900528_ARTICLE42',
    'CHP_18980305_ARTICLE63',
    'DSC_18760710_ARTICLE26',
    'ESD_18770602_ARTICLE11',
    'DSC_18690820_ARTICLE32', # WOULD BE VERY GOOD TO HAVE!
    'AS_18810910_ARTICLE31',
    'LT_18970918_ARTICLE10',
    'LT_18780620_ARTICLE15',
    'ESD_18991007_ARTICLE28',
    'OAM_18830907_ARTICLE12',
    'BH_18890222_ARTICLE33',
    'NZTIM_18790922_ARTICLE15',
    'LT_18990304_ARTICLE23',
    'NZTIM_18870630_ARTICLE42',
    'ESD_18880421_ARTICLE19', # REVIEW OF SALMOND'S BOOK REIGN OF GRACE
    'ODT_18800925_ARTICLE32',
    'WI_18680822_ARTICLE17',
    'DSC_18760529_ARTICLE30',
    'OW_18790510_ARTICLE18',
    'LT_18710816_ARTICLE14',
    'ODT_18751113_ARTICLE23',
    'OW_18980616_ARTICLE177',
    'OW_18600324_ARTICLE1',
    'TC_18930809_ARTICLE4',
    'ODT_18780307_ARTICLE13',
    'NOT_18760629_ARTICLE9',
    'FS_18830811_ARTICLE11',
    'ODT_18980813_ARTICLE61',
    'WH_18800503_ARTICLE14',
    'ESD_18880630_ARTICLE38',
    'AS_18921224_ARTICLE119',
    'OW_18700730_ARTICLE45',
    'ODT_18960530_ARTICLE23',
    'ODT_18950713_ARTICLE61',
    'ESD_18951016_ARTICLE44',
    'AS_18880707_ARTICLE89',
    'ODT_18990920_ARTICLE15',
    'WC_18750921_ARTICLE16',
    'ODT_18720910_ARTICLE13',
    'OW_18790222_ARTICLE24',
    'OW_18920519_ARTICLE16',
    'ESD_18750428_ARTICLE4',
    'WT_18850915_ARTICLE31',
    'BH_18760225_ARTICLE22',
    'MEX_18900430_ARTICLE32',
    'AS_18821010_ARTICLE41',
    'NEM_18840707_ARTICLE12',
    'ODT_18980127_ARTICLE31',
    'NZTIM_18960806_ARTICLE1',
    'ESD_18941026_ARTICLE4',
    'HLC_18950215_ARTICLE19',
    'OO_18910214_ARTICLE3',
    'OO_18920109_ARTICLE7',
    'OO_18921224_ARTICLE2',
    'OO_18961226_ARTICLE3'
] # USELESS AS EXTERNAL VALIDATION.

desired_chp = [
    'CHP_18940707_ARTICLE3', # Worthington
    'CHP_18921024_ARTICLE53', # Mr Hosking's Lecture
    'CHP_18991023_ARTICLE39', # Science nature etc
    'CHP_18630117_ARTICLE3', # Dugald
    'CHP_18930322_ARTICLE47', # God and Man
    'CHP_18950607_ARTICLE45', # Music and noise.
    'WI_18710720_ARTICLE13' #Prof MacGreggor.
]
# Press, Volume XXVI, Issue 3419, 21 August 1876, Page 3 <- Not picked up as not tagged 'article' https://paperspast.natlib.govt.nz/newspapers/CHP18760821.2.14

# These are for rel subset.
desired_ball = [
    'ODT_18710509_ARTICLE18', # 1
    'TT_18710720_ARTICLE23', # 2 (Tuapeka Times) ???
    'OW_18730531_ARTICLE11', # 3 (lect on evo)
    'ODT_18760516_ARTICLE22', #4
    'OW_18760520_ARTICLE81', #5 Salmond - is darwin materialistic?
    'OW_18760527_ARTICLE71', #6
    'ODT_18760617_ARTICLE20', #7
    'OW_18780907_ARTICLE28', #8
    'ST_18800924_ARTICLE14', #9 southland times' letter
    'ODT_18801204_ARTICLE15', #10
    'OW_18820701_ARTICLE45', #11
    'OW_18820701_ARTICLE77',
    'ODT_18820705_ARTICLE26',
    'OW_18820708_ARTICLE61', #13
    'ME_18940605_ARTICLE7' #14
]

desired_wood = [
    'ODT_18880705_ARTICLE21', # f reign of grace
    'ODT_18880906_ARTICLE30', # dunedin presb meeting
    'ODT_18881101_ARTICLE18', # synod rep (some rog)
    'ODT_18881102_ARTICLE31', # ditto
    'ODT_18881103_ARTICLE24', # ditto
    'ODT_18881108_ARTICLE3' # composite editorial.
]

desired_crane = [
    'ODT_18810528_ARTICLE13',
    'OW_18810604_ARTICLE108',  #?? https://paperspast.natlib.govt.nz/newspapers/OW18810604.2.79.2 almost identical to previous.
    'OW_18820701_ARTICLE77',
    'NOT_18840128_ARTICLE15', #bactaria.
    'ODT_18840923_ARTICLE8', # Octopus . in  The Otago Daily Times. TUESDAY , SEPTEMBER 28, 1884.
    'ODT_18850602_ARTICLE17',
    'ODT_18950927_ARTICLE6', #THE OTAGO DAILY TIMES FRIDAY, SEPTEMBER 27, 1895.
    'ODT_18910723_ARTICLE10', #THE OTAGO DAILY TIMES THURSDAY, JULY 23, 1891.
    'ODT_18820629_??', #NOT 'ARTICLE25' salmond on parker. IT's an AD.
    'ODT_18861120_ARTICLE3' #THE OTOGO DAILY TIMES SATURDAY, NOVEMBER SO, 1886.
]



def full_codes_generate_df(index):
    df = pd.DataFrame(index=index, columns=['philoso', 'nb1_philoso', 'nb2_v2_philoso', 'rel_v2_philoso'])
    for dataset in ['philoso', 'nb1_philoso', 'nb2_v2_philoso', 'rel_v2_philoso']:
        corpus_df = pd.read_pickle(f'pickles/{dataset}_df.tar.gz')
        for article in index:
            if article in corpus_df.index:
                df.loc[article][dataset] = True
            else:
                df.loc[article][dataset] = False
        del corpus_df
    return df



def partial_codes_generate_df(index):
    df = pd.DataFrame(index=index, columns=[
        'philoso', 'philoso_matches',
        'nb1_philoso', 'nb1_philoso_matches',
        'nb2_v2_philoso', 'nb2_v2_philoso_matches',
        'rel_v2_philoso', 'rel_v2_philoso_matches'])
    for dataset in ['philoso', 'nb1_philoso', 'nb2_v2_philoso', 'rel_v2_philoso']:
        corpus_df = pd.read_pickle(f'pickles/{dataset}_df.tar.gz')
        for article in index:
            matches = []
            df.loc[article][dataset] = False
            for item in corpus_df.index:
                if item.startswith(article):
                    df.loc[article][dataset] = True
                    matches.append(item)
            df.loc[article][f'{dataset}_matches'] = matches
        del corpus_df
    return df


def generate_latex_table(df):
    table_content = ''
    for row in df.iterrows():
        bools = [str(i) for i in row[1]]
        end_line = '\\\\ \n '
        line = f'{row[0]} & {" & ".join(bools)} {end_line}'
        table_content += line
    return table_content


chp_df = full_codes_generate_df(desired_chp)
chp_df
#45 - music and noise. Losing some breadth.

ball_df = full_codes_generate_df(desired_ball)
ball_df

# Look in to ST_18800924_ARTICLE14 and ME_18940605_ARTICLE7 and TT_18710720_ARTICLE23; wood: ODT_18881108_ARTICLE3;
# Missing from Corpus_dfs 'ST_18800924_ARTICLE14', 'TT_18710720_ARTICLE23', missing from slices...
print(generate_latex_table(ball_df))

#nb2_philoso_df = pd.read_pickle('pickles/nb2_v2_philoso_df.tar.gz')
#del nb2_philoso_df
nb1_philoso_df = pd.read_pickle('pickles/nb1_philoso_df.tar.gz')

title = {}
for row in ball_df.iterrows():
    for match in row[1]['rel_v2_philoso_matches']:
        title[match] = nb2_philoso_df.loc[match]['Title']
title


wood_df = full_codes_generate_df(desired_wood)
wood_df
print(generate_latex_table(wood_df))


crane_df = full_codes_generate_df(desired_crane)
crane_df
print(generate_latex_table(crane_df))

title = {}
for row in crane_df.iterrows():
    for match in row[1]['nb1_philoso_matches']:
        title[match] = nb1_philoso_df.loc[match]['Title']
title


df['philoso'].value_counts()
df['nb1_philoso'].value_counts()
df['nb2_v2_philoso'].value_counts()
lost_nb1 = df[df['nb1_philoso']==False]
lost_nb2 = df[df['nb2_v2_philoso']==False]
lost_nb1
lost_nb2
nb2_not_nb1 = df[(df['nb1_philoso']==False) & (df['nb2_v2_philoso']==True)]
nb2_not_nb1
nb1_not_nb2 = df[(df['nb1_philoso']==True) & (df['nb2_v2_philoso']==False)]
nb1_not_nb2
df.to_pickle('pickles/desired_articles_status_df.tar.gz')

desired_arts = pd.read_pickle('pickles/desired_articles_status_df.tar.gz')

labelled = pd.read_pickle('pickles/classified_df.pickle')
philoso_df = pd.read_pickle('pickles/philoso_df.tar.gz')
labelled = labelled[labelled['Philosophy']==True]
[i for i in desired_articles if not i in labelled.index]
labelled.loc['BH_18970910_ARTICLE32']



my_list = desired_chp + desired_ball + desired_wood + desired_crane

[article_code for article_code in my_list if article_code in labelled.index]
